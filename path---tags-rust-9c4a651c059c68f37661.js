webpackJsonp([0xeb7914649a24],{435:function(e,o){e.exports={pathContext:{posts:[{html:'<h2>Context</h2>\n<p>Learning a new language is not only about its syntax, library, but also its tooling, how to run it, dependency management, how to look up the API document.</p>\n<p>As a Java world engineer over a decade, I have been used to the <a href="https://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/javadoc.html">javadoc structure</a>. When I start to learn Rust, everything is different (which is a good thing ^_^), I don\'t even know how to find the right API doc.</p>\n<p>As a spoiled user in Java world, this skill becomes quite important. So I summarised my exploration experience below, and hope it could help folks who have the same trouble.</p>\n<p>Take the following <code>actix-web</code> <a href="https://github.com/actix/examples/blob/master/json/src/main.rs">json example code</a> as an example:</p>\n<pre><code class="language-rust">/// This handler uses `HttpRequest::json()` for loading json object.\nfn index(req: HttpRequest) -> Box&#x3C;Future&#x3C;Item = HttpResponse, Error = Error>> {\n    req.json()\n        .from_err()  // convert all errors into `Error`\n        .and_then(|val: MyObj| {\n            println!("model: {:?}", val);\n            Ok(HttpResponse::Ok().json(val))  // &#x3C;- send response\n        })\n        .responder()\n}\n</code></pre>\n<h2><code>req.json()</code></h2>\n<p>Go to <a href="https://docs.rs/actix-web/0.6.10/actix_web/">actix-web doc site</a>, search <code>HttpRequest</code>.</p>\n<p>There is no <code>json()</code> method in the left-top corner <code>Methods</code> area. Then <code>HttpRequest</code> must implement some <code>trait</code> which has a <code>json()</code> method.</p>\n<p>Go check the <code>Trait Implementations</code>, there is a <code>HttpMessage</code>, which is possible, click it and click the <code>HttpMessage</code> link in the right panel to navigate to the <code>HttpMessage</code> page. Now, you can find the <code>json</code> method in <code>Provided Methods</code> panel.</p>\n<p>Check the source code of <code>HttpMessage::json</code></p>\n<pre><code class="language-rust">fn json&#x3C;T: DeserializeOwned>(self) -> JsonBody&#x3C;Self, T>\nwhere\n    Self: Stream&#x3C;Item = Bytes, Error = PayloadError> + Sized,\n{\n    JsonBody::new(self)\n}\n</code></pre>\n<p>And by the way, <code>JsonBody</code> implements <code>Future</code>, so this <code>json()</code> actually returns a Future of Json.</p>\n<h2><code>.from_err()</code></h2>\n<p>The <code>json()</code> method returns a <code>JsonBody</code> struct, but it doesn\'t have a method named <code>from_err()</code>, But it implements <code>Future</code> trait, which has this method defined.</p>\n<h2><code>.and_then()</code></h2>\n<p>Since <code>from_err()</code> returns a <code>FromErr</code> which also implements <code>Future</code>.</p>\n<h2><code>.responder()</code></h2>\n<p>This one is strange, you can\'t find it in the <code>Methods/Provided Methods</code> areas of <code>Future</code>, <code>HttpMessage</code> or <code>JsonBody</code>.</p>\n<p>Search it and we know it\'s <code>AsyncResponder</code> trait that implements it, and check the source code:</p>\n<pre><code class="language-rust">pub trait AsyncResponder&#x3C;I, E>: Sized {\n    fn responder(self) -> Box&#x3C;Future&#x3C;Item = I, Error = E>>;\n}\n\nimpl&#x3C;F, I, E> AsyncResponder&#x3C;I, E> for F\nwhere\n    F: Future&#x3C;Item = I, Error = E> + \'static,\n    I: Responder + \'static,\n    E: Into&#x3C;Error> + \'static,\n{\n    fn responder(self) -> Box&#x3C;Future&#x3C;Item = I, Error = E>> {\n        Box::new(self)\n    }\n}\n</code></pre>\n<p>So, actually, it is implemented for <code>F: Future</code> already.</p>\n<p><strong>In summary, the whole code chain actually works under <code>Future</code> namespace.</strong></p>\n<h2>What If ...</h2>\n<p>What I hope is actually something like Java(or other strong typed languages) does, given a <code>struct</code>:</p>\n<ul>\n<li>\n<p>we want to know all the <code>trait</code>s it implemented.</p>\n<p>You can find them in the left panel, and also a list in the main area.</p>\n</li>\n<li>\n<p>we want to know all the methods it has, and the methods implemented for all the traits.</p>\n<p>For each trait in the list in main area, there is a <code>[+]</code>, you need to click and unfold it before you can see all the methods, that\'s the trick.</p>\n</li>\n</ul>\n<p>I love Rust, hope the tooling can get better and better over time.</p>\n<p><strong>PS:</strong></p>\n<p>It seems I\'m not the only one who has this trouble, <a href="https://github.com/rust-lang/rust/issues/40116">https://github.com/rust-lang/rust/issues/40116</a></p>',id:"/Users/lliu/github/smilingleo.github.io/src/pages/2018/How To Read Rust API Doc.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-06-01T15:43:15.000+08:00",path:"/2018/how-to-read-rust-api-doc",title:"How To Read Rust API Doc",excerpt:"",tags:["rust"]}}],tagName:"rust"}}}});
//# sourceMappingURL=path---tags-rust-9c4a651c059c68f37661.js.map